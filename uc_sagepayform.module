<?php
/** 
 * See for Hooks : http://api.ubercart.me/api/drupal/drupal%21includes%21module.inc/group/hooks/7
*/


function uc_sagepayform_uc_payment_method() {
  $methods[] = array(
    'id' => 'sagepayform',
    'name' => t('Sagepay'),
    'title' => theme('uc_sagepayform_cards'),
    'desc' => t('Redirects to Sagepay Website to use forms'),
    'callback' => 'uc_payment_method_sagepayform',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

function theme_uc_sagepayform_cards() {
	$path = drupal_get_path('module', 'uc_sagepayform');
	drupal_add_css($path . '/css/style.css');
	$output = theme('image', array('path' => $path . '/images/sage_pay_logo.gif', 'alt' => 'Sagepay'));
	return $output;
}


function uc_payment_method_sagepayform($op, &$order, $form = NULL, &$form_state = NULL) {
	switch ($op) {
		case 'cart-process':
			$_SESSION['pay_method'] = $form_state['values']['panes']['payment']['payment_method'];
			break;

		case 'settings':
			$form['array_filter'] = array(
				'#type' => 'value',
				'#value' => TRUE,
			);
			$form['uc_sagepayform'] = array(
				'#type' => 'vertical_tabs',
					'#attached' => array(
						'js' => array(
						'vertical-tabs' => drupal_get_path('module', 'uc_credit') . '/uc_credit.admin.js',
					),
				),
			);
			$form['sagepay_basic'] = array(
				'#type' => 'fieldset',
				'#title' => t('Basic Settings'),
				'#group' => 'uc_sagepayform',
			);
			$form['sagepay_basic']['uc_sagepayform_vendor'] = array(
				'#type' => 'textfield',
				'#title' => t('Vendor'),
				'#description' => t('The unique company identifier, assigned to you by Sage Pay'),
				'#default_value' => variable_get('uc_sagepayform_vendor', ''),
				'#size' => 16,
				'#required' => TRUE,
			);
			$form['sagepay_basic']['uc_sagepayform_txtype'] = array(
				'#type' => 'select',
				'#title' => t('TxType'),
				'#description' => t('Type of transaction to perform. This depends on the what your Sage Pay account supports.<br> Default is <b>PAYMENT</b>'),
      				'#multiple' => FALSE,
				'#options' => array(
					'PAYMENT' => t('PAYMENT'),
					'DEFERRED' => t('DEFERRED'),
					'AUTHENTICATE' => t('AUTHENTICATE'),
				),
				'#default_value' => variable_get('uc_sagepayform_txtype', 'PAYMENT'),
				'#required' => TRUE,
			);
			$form['sagepay_basic']['uc_sagepayform_encryption_password'] = array(
				'#type' => 'textfield',
				'#title' => t('Encryption Password'),
				'#description' => t('The XOR Encryption password assigned to you by Sage Pay.'),
				'#default_value' => variable_get('uc_sagepayform_encryption_password', ''),
				'#size' => 16,
				'#required' => TRUE,
			);
			$form['sagepay_basic']['uc_sagepayform_environment'] = array(
				'#type' => 'select',
				'#title' => t('Payment Environment'),
				'#description' => t('The current payment enviroment.'),
      				'#multiple' => FALSE,
				'#options' => array(
					'simulator' => t('Simulator'),
					'test' => t('Test'),
					'live' => t('Live'),
				),
				'#default_value' => variable_get('uc_sagepayform_environment', ''),
				'#required' => TRUE,
			);
			
			$form['sagepay_vps'] = array(
				'#type' => 'fieldset',
				'#title' => t('VPS Protocol'),
				'#group' => 'uc_sagepayform',
			);
			$form['sagepay_vps']['uc_sagepayform_vps_protocol'] = array(
				'#type' => 'textfield',
				'#title' => t('VPS Protocol'),
				'#description' => t('This version currently supports version 2.23<br>Only change this if you know what you are doing.'),
				'#default_value' => variable_get('uc_sagepayform_vps_protocol', '2.23'),
				'#size' => 16,
				'#required' => TRUE,
			);
			$form['sagepay_urls'] = array(
				'#type' => 'fieldset',
				'#title' => t('Payment URLs'),
				'#group' => 'uc_sagepayform',
			);
			$form['sagepay_urls']['uc_sagepayform_simulator_url'] = array(
				'#type' => 'textfield',
				'#title' => t('Simulator URL'),
				'#description' => t('The Sagepay form simulator URL for testing and development.'),
				'#default_value' => variable_get('uc_sagepayform_simulator_url', 'https://test.sagepay.com/Simulator/VSPFormGateway.asp'),
				//'#element_validate' => array('uc_sagepayform_valid_url'),
				'#required' => TRUE,
			);
			$form['sagepay_urls']['uc_sagepayform_test_url'] = array(
				'#type' => 'textfield',
				'#title' => t('Test URL'),
				'#description' => t('The Sagepay form test environment URL.'),
				'#default_value' => variable_get('uc_sagepayform_test_url', 'https://test.sagepay.com/gateway/service/vspform-register.vsp'),
				//'#element_validate' => array('uc_sagepayform_valid_url'),
				'#required' => TRUE,
			);
			$form['sagepay_urls']['uc_sagepayform_live_url'] = array(
				'#type' => 'textfield',
				'#title' => t('Live URL'),
				'#description' => t('The Sagepay form live environment URL.'),
				'#default_value' => variable_get('uc_sagepayform_live_url', 'https://live.sagepay.com/gateway/service/vspform-register.vsp'),
				//'#element_validate' => array('uc_sagepayform_valid_url'),
				'#required' => TRUE,
			);
     			return $form;
			break;
	}
}


function uc_sagepayform_theme() {
  return array(
    'uc_sagepayform_cards' => array(
      'variables' => array(),
    ),
  );
}

function uc_sagepayform_form_alter(&$form, &$form_state, $form_id) {
	if($form_id == 'uc_cart_checkout_review_form') {
		//$form['#action '] =  variable_get('uc_sagepayform_'.variable_get('uc_sagepayform_environment').'_url');
		$form['formAction'] = array (
 		  '#type' => 'textfield',
 		  '#title' => t ('formAction'),
 		  '#value' =>  variable_get('uc_sagepayform_'.variable_get('uc_sagepayform_environment').'_url')
 		);
		$form['VPSProtocol '] = array (
 		  '#type' => 'textfield',
 		  '#title' => t ('VPSProtocol'),
 		  '#value' => variable_get('uc_sagepayform_vps_protocol'),
 		);
		$form['TxType '] = array (
 		  '#type' => 'textfield',
 		  '#title' => t ('TxType'),
 		  '#value' => variable_get('uc_sagepayform_txtype'),
 		);
		$form['Vendor'] = array (
 		  '#type' => 'textfield',
 		  '#title' => t ('Vendor'),
 		  '#value' => variable_get('uc_sagepayform_vendor'),
 		);
 		
 		$encyption_string = sagepayform_encryption_string(variable_get('uc_sagepayform_encryption_password'), $form_state);
 		
		$form['Crypt'] = array (
 		  '#type' => 'textfield',
 		  '#title' => t ('Crypt'),
 		  '#value' => $encyption_string,
 		);
	}
}

function sagepayform_encryption_string($pass, &$form_state) {
	//build string from form_state
	
	$str = 'encyption_string';
	return sagepayform_encrypt($str, $pass);
}

/*--
 - Taken from sagepay php dev pack - includes.php (line 246 onwards)
--*/
function sagepayform_encrypt($str, $pass, $type = False) {

	if ($type == "XOR") {
		//** XOR encryption with Base64 encoding **
		return base64_encode(simpleXor($str,$pass));
	} else {
		//** AES encryption, CBC blocking with PKCS5 padding then HEX encoding - DEFAULT **

		//** use initialization vector (IV) set from $strEncryptionPassword
	    	//$strIV = $strEncryptionPassword;
	    	
	    	//** add PKCS5 padding to the text to be encypted
	    	$str = addPKCS5Padding($str);

	    	//** perform encryption with PHP's MCRYPT module
		$strCrypt = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $pass, $str, MCRYPT_MODE_CBC, $pass);
		
		//** perform hex encoding and return
		return "@" . bin2hex($strCrypt);
	}
}

function sagepayform_decrypt($str) {}

// New function added 2011-12-29 
// Need to remove padding bytes from end of decoded string
function removePKCS5Padding($decrypted) {
	$padChar = ord($decrypted[strlen($decrypted) - 1]);
    return substr($decrypted, 0, -$padChar); 
}

//** PHP's mcrypt does not have built in PKCS5 Padding, so we use this
function addPKCS5Padding($input)
{
   $blocksize = 16;
   $padding = "";

   // Pad input to an even block size boundary
   $padlength = $blocksize - (strlen($input) % $blocksize);
   for($i = 1; $i <= $padlength; $i++) {
      $padding .= chr($padlength);
   }
   
   return $input . $padding;
}


